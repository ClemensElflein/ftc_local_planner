#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("speed_fast", double_t, 0, "The max speed with which the control point is moved along the path if the straight distance is larger than speed_fast_threshold", 0.5, 0, 2.0)
gen.add("speed_fast_threshold", double_t, 0, "Min straight distance in front of the robot for fast speed to be used", 1.5, 0, 5.0)
gen.add("speed_fast_threshold_angle", double_t, 0, "Max angle between current pose and pose on path to still count as straight line", 5.0, 0, 45.0)
gen.add("speed_slow", double_t, 0, "Slow speed", 0.2, 0, 2.0)
gen.add("speed_angular", double_t, 0, "The max angular speed with which the control point is moved along the path", 20.0, 1.0, 150.0)
gen.add("acceleration", double_t, 0, "Acceleration for speed transition", 1.0, 0, 10.0)


gen.add("kp_lon", double_t, 0, "KP for speed controller lon", 1.0, 0.0, 50.0)
gen.add("ki_lon", double_t, 0, "KI for speed controller lon", 0.0, 0.0, 1.0)
gen.add("ki_lon_max", double_t, 0, "KI windup for speed controller lon", 10.0, 0.0, 100.0)
gen.add("kd_lon", double_t, 0, "KD for speed controller lon", 0.0, 0.0, 1.0)
gen.add("ki_lat", double_t, 0, "KI for speed controller lat", 0.0, 0.0, 5.0)
gen.add("ki_lat_max", double_t, 0, "KI windup for speed controller lat", 10.0, 0.0, 500.0)
gen.add("kp_lat", double_t, 0, "KP for speed controller lat", 1.0, 0.0, 250.0)
gen.add("kd_lat", double_t, 0, "KD for speed controller lat", 0.0, 0.0, 5.0)
gen.add("kp_ang", double_t, 0, "KP for angle controller", 1.0, 0.0, 50.0)
gen.add("ki_ang", double_t, 0, "KI for angle controller", 0.0, 0.0, 5.0)
gen.add("ki_ang_max", double_t, 0, "KI windup for speed controller angle", 10.0, 0.0, 500.0)
gen.add("kd_ang", double_t, 0, "KD for angle controller", 0.0, 0.0, 5.0)


gen.add("max_cmd_vel_speed", double_t, 0, "Max speed to send to the controller", 2.0, 0.0, 5.0)
gen.add("max_cmd_vel_ang", double_t, 0, "Max angular speed to send to the controller", 2.0, 0.0, 5.0)
gen.add("max_goal_distance_error", double_t, 0, "Wait for robot to get closer than max_goal_distance_error to the goal before setting goal as finished", 1.0, 0.0, 3.0)
gen.add("max_goal_angle_error", double_t, 0, "Wait for robot to get a better angle than max_goal_angle_error before setting goal as finished", 10.0, 0.0, 360.0)
gen.add("goal_timeout", double_t, 0, "Timeout for max_goal_distance_error and max_goal_angle_error", 5.0, 0.0, 100.0)
gen.add("max_follow_distance", double_t, 0, "Stop controller if robot is further away than max_follow_distance (i.e. crash detection)", 1.0, 0.0, 3.0)



gen.add("forward_only", bool_t, 0, "Only allow forward driving", True)
gen.add("restore_defaults", bool_t, 0, " Load default config", False)
gen.add("debug_pid", bool_t, 0, " Emit debug_pid topic", False)

exit(gen.generate("ftc_local_planner", "ftc_local_planner", "FTCPlanner"))
